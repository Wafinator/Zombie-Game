import java.awt.*;
import java.awt.Graphics;
import java.awt.Color;
import java.awt.event.*; 
import javax.swing.*;
import java.util.ArrayList;


//All code for basic movements and shooting as well as camera was taken from https://www.youtube.com/watch?v=SKFNouTFgto&ab_channel=RealTutsGML with small modifications
//Slight modifications were made from the original code taken from the link for my project 
public class Game extends JPanel implements MouseListener, MouseMotionListener, KeyListener {
  private final int RIGHT = 0, UP = 1, LEFT = 2, DOWN = 3;

  private String screen="GAME";
  private final boolean[] keys = new boolean[KeyEvent.KEY_LAST + 1];
  private boolean frozen=false;

  private final ZombieGame mainFrame;

  //Graphics graphics;

  // Box player;
  //Box enemy;

  //Instances
  // private Camera cam;

  public Image img1 = Toolkit.getDefaultToolkit().getImage("images/player1.gif");//loading my image
  public Image img2 = Toolkit.getDefaultToolkit().getImage("images/enemyBasic.gif");//loading enemy image

  public ArrayList<Zombie> zombies = new ArrayList<>();
  public ArrayList<Bullet> bullets = new ArrayList<>();

  private Player player;

  int lvl = 0, lives=3, invincible=300;

  public Game(ZombieGame m) {
    mainFrame = m;
    setSize(1100, 700);
    addKeyListener(this);
    addMouseListener(this);
    addMouseMotionListener(this);
    newLevel();
    player = new Player(550, 350);
  }

  public void run() {
    if(!frozen&&screen.equals("GAME")) {
      invincible--;
      System.out.println(invincible);
      movePlayer();
      for (Bullet b : bullets) {
        b.move();
      }
      bullets.removeIf(b -> !b.isActive());
      for (Zombie z : zombies) {
        checkHit(z);
        z.move(player);
        for (Bullet b : bullets) {
          z.checkHit(b);
        }
      }
      zombies.removeIf(z -> !z.isActive());

    /*
    for(Zombie z:zombies){
      if(!z.isActive()){
        zombies.remove(z);
      }
    }
     */

      if (zombies.size() == 0) newLevel();
    }
    repaint();
  }

  public void checkHit(Zombie z){
    if(invincible<=0) {
      if (Math.abs(z.getX() - player.getX()) < 40 && Math.abs(z.getY() - player.getY()) < 40) {
        lives--;
        if(lives<=0){
          screen="LOSS";
          return;
        }
        invincible = 300;
        frozen = true;
      }
    }
  }

  public void newLevel() {
    lvl ++;
    if (lvl == 1) {
      for (int i = 0; i < 3; i++) {
        zombies.add(new Zombie(randint(0,1100),randint(0,700)));
      }
    }
    if (lvl == 2) {
      for (int i = 0; i < 5; i++) {
        zombies.add(new Zombie(randint(0,1100),randint(0,700)));
      }
    }
    if (lvl == 3) {
      for (int i = 0; i < 7; i++) {
        zombies.add(new Zombie(randint(0,1100),randint(0,700)));
      }
    }
    if(lvl==4){
      for (int i = 0; i < 9; i++) {
        zombies.add(new Zombie(randint(0,1100),randint(0,700)));
      }
    }
    if(lvl==5){
      screen="WIN";
    }
  }

  public void movePlayer() {
    if (keys[KeyEvent.VK_W]){
      player.move(UP);
    }
    if (keys[KeyEvent.VK_A]){
      player.move(LEFT);
    }
    if (keys[KeyEvent.VK_S]){
      player.move(DOWN);
    }
    if (keys[KeyEvent.VK_D]){
      player.move(RIGHT);
    }
  }

  public void mousePressed(MouseEvent e) {
    frozen=false;
    int mx = e.getX(), my = e.getY();
    double angle;
    if (mx > player.getX()) {
      angle = Math.atan((double) (my - player.getY()) / (double) (mx - player.getX()));
    } else if (mx < player.getX()) {
      angle = Math.atan((double) (my - player.getY()) / (double) (mx - player.getX())) + Math.PI;
    } else {
      if (my < player.getY()) angle = Math.PI / 2;
      else angle = 3 * Math.PI / 2;
    }
    bullets.add(new Bullet(player.getX(), player.getY(), angle));
  }

  public void mouseReleased(MouseEvent e) { }

  public void mouseEntered(MouseEvent e) { }

  public void mouseExited(MouseEvent e) { }

  public void mouseMoved(MouseEvent e) { }

  public void mouseDragged(MouseEvent e) { }

  public void mouseClicked(MouseEvent e) {

  }

  public void keyPressed(KeyEvent e) { //update keys pushed down
    frozen=false;
    keys[e.getKeyCode()] = true;
  }

  public void keyReleased(KeyEvent e) { //keys released
    keys[e.getKeyCode()] = false;
  }

  public void keyTyped(KeyEvent e) {
  }

  public void addNotify() {
    super.addNotify();
    requestFocus();
    mainFrame.start();
  }

  public void paintComponent(Graphics g) {//learned how to do canvas text from https://www.youtube.com/watch?v=WXVQz0ARz28&ab_channel=AndyWicks
    g.setColor(Color.black);
    g.fillRect(0, 0, 1100, 700);
    if(screen.equals("GAME")) {
      g.setColor(Color.YELLOW);
      for (Bullet b : bullets) {
        g.fillOval(b.getX() - 2, b.getY() - 2, 4, 4);
      }
      g.drawImage(img1, player.getX() - 25, player.getY() - 25, null);
      for (Zombie z : zombies) {
        g.drawImage(img2, z.getX() - 25, z.getY() - 25, null);
      }
      g.setColor(Color.red);
      g.setFont(new Font("Comic Sans MS", Font.BOLD, 25));
      g.drawString("Level :" + lvl, 10, 25);
      g.drawString("Enemies left:" + zombies.size(), 10, 55);
      g.setColor(Color.blue);
      g.drawString("Lives " + lives, 475, 25);
    }
    else if(screen.equals("WIN")){
      g.setFont(new Font("Comic Sans MS", Font.BOLD, 50));
      g.setColor(Color.white);
      g.drawString("Game over. You won!", 300, 350);
    }
    else if(screen.equals("LOSS")){
      g.setFont(new Font("Comic Sans MS", Font.BOLD, 50));
      g.setColor(Color.red);
      g.drawString("Game over. You lost!", 300, 350);
    }
  }

  public static int randint(int low, int high) { //returns random int between 2 ints inclusive
    return (int) (Math.random() * (high - low + 1) + low);
  }
}